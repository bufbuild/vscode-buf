{
    "//": [
        "See https://protobuf.com/docs/language-spec",
        "Comments in this file are stored in // keys."
    ],
    "scopeName": "source.proto",
    "fileTypes": [
        "proto"
    ],
    "foldingStartMarker": "(\\{|/\\*\\*?)\\s*$",
    "foldingStopMarker": "^\\s*(\\}|\\*/)",
    "patterns": [
        {
            "name": "comment.line.double-slash.proto",
            "begin": "//",
            "end": "$\\N?"
        },
        {
            "name": "comment.line.block.proto",
            "begin": "/\\*",
            "end": "\\*/"
        },
        {
            "name": "string.quoted.double.proto",
            "begin": "\"",
            "end": "(?<!\\\\)(\\\\\\\\)*\"|$",
            "patterns": [
                {
                    "include": "#escapes"
                },
                {
                    "include": "#bad_escapes"
                }
            ],
            "captures": {
                "1": {
                    "name": "constant.character.escape.proto"
                }
            }
        },
        {
            "name": "string.quoted.single.proto",
            "begin": "'",
            "end": "(?<!\\\\)(\\\\\\\\)*'|$",
            "patterns": [
                {
                    "include": "#escapes"
                },
                {
                    "include": "#bad_escapes"
                }
            ],
            "captures": {
                "1": {
                    "name": "constant.character.escape.proto"
                }
            }
        },
        {
            "name": "constant.numeric.proto",
            "match": "(\\b|\\.)[0-9](\\.|([eE][-+]?)|\\w)*"
        },
        {
            "//": "This is not done by semantic highlighting right now so it's here",
            "name": "entity.name.type.proto",
            "match": "(?<=package\\s+)(?:[\\w]+\\s*\\.\\s*)*\\s*[\\w]+\\b"
        },
        {
            "//": "Protobuf does not have control flow, so we repurpose it for 'definition' keywords.",
            "name": "keyword.control.proto",
            "match": "\\b(syntax|edition|import|package|option|message|enum|service|extend|oneof|group|rpc)\\b"
        },
        {
            "name": "keyword.other.proto",
            "match": "\\b(weak|public|group|map|extensions|reserved|stream|returns|to|optional|required|repeated)\\b"
        },
        {
            "name": "constant.language.proto",
            "match": "\\b(inf|nan|true|false|max)\\b"
        }
    ],
    "repository": {
        "escapes": {
            "name": "constant.character.escape.proto",
            "//": [
                "This pattern will match all possible escape sequences, so they can be highlighted as such.",
                "They are as follows, without regex escaping applied:",
                "simple_escape_seq: \\[abfnrtv\\'\"?]",
                "hex_escape_seq:    \\[xX][a-fA-F0-9]{1,2}",
                "octal_escape_seq:  \\[0-7]{1,3}",
                "unicode_escape_seq:  \\u[a-fA-F0-9]{4}",
                "unicode_escape_seq:  \\U[a-fA-F0-9]{8}"
            ],
            "match": "(\\\\[abfnrtv\\\\'\"\\?])|(\\\\[xX][a-fA-F0-9]{1,2})|(\\\\[0-7]{1,3})|(\\\\u[a-fA-F0-9]{4})|(\\\\U[a-fA-F0-9]{8})"
        },
        "bad_escapes": {
            "name": "invalid.error",
            "//": "This pattern picks up all invalid variants of the above. For example, this will highlight \\xxx, not just the \\x.",
            "match": "(\\\\[xX][^'\"\\\\]{1,2})|(\\\\u[^'\"\\\\]{1,4})|(\\\\U[^'\"\\\\]{0,8})|(\\\\.)"
        }
    }
}