{
  "name": "Protocol Buffer",
  "scopeName": "source.proto",
  "fileTypes": ["proto"],

  "patterns": [
    { "include": "#comments" },
    { "include": "#syntax" },
    { "include": "#package" },
    { "include": "#import" },
    { "include": "#optionStmt" },
    { "include": "#message" },
    { "include": "#enum" },
    { "include": "#service" },
    { "include": "#field" },
    { "include": "#mapfield" },
    { "include": "#enumValue" }
  ],

  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.proto",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.double-slash.proto",
          "begin": "//",
          "end": "$\\n?"
        }
      ]
    },
    "syntax": {
      "match": "\\s*(syntax|edition)\\s*(=)?\\s*(\"[\\w.]+\")?\\s*(;)?",
      "captures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "keyword.operator.assignment.proto" },
        "3": { "name": "string.quoted.double.proto.syntax" },
        "4": { "name": "punctuation.terminator.proto" }
      }
    },
    "package": {
      "match": "\\s*(package)\\s+([\\w.]+)\\s*(;)?",
      "captures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "string.unquoted.proto.package" },
        "3": { "name": "punctuation.terminator.proto" }
      }
    },
    "import": {
      "match": "\\s*(import)\\s+(weak|public)?\\s*(\"[^\"]+\")?\\s*(;)?",
      "captures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "keyword.other.proto" },
        "3": { "name": "string.quoted.double.proto.import" },
        "4": { "name": "punctuation.terminator.proto" }
      }
    },
    "optionStmt": {
      "begin": "(option)\\s+(\\w+|\\(\\w+(\\.\\w+)*\\))(\\.\\w+)*\\s*(=)?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "variable.other.proto" },
        "3": { "name": "variable.other.proto" },
        "4": { "name": "variable.other.proto" },
        "5": { "name": "keyword.operator.assignment.proto" }
      },
      "end": "(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [
        { "include": "#constants" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#subMsgOption" }
      ]
    },
    "subMsgOption": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#kv" },
        { "include": "#comments" },
        { "include": "#msgLitConstants" },
        {
          "match": "(,)|(;)",
          "captures": {
            "1": { "name": "punctuation.separator.proto" },
            "2": { "name": "punctuation.terminator.proto" }
          }
        }
      ]
    },
    "kv": {
      "begin": "(\\w+)|(\\[\\s*(((\\w+)|(.)|(/))//s*)*\\])\\s*(:|(?={))",
      "beginCaptures": {
        "1": { "name": "variable.other.proto" },
        "5": { "name": "variable.other.proto" },
        "6": { "name": "punctuation.separator.proto" },
        "7": { "name": "punctuation.separator.proto" },
        "8": { "name": "punctuation.separator.key-value.proto" }
      },
      "end": "(;)|(,)|(?=[}/_a-zA-Z])",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" },
        "2": { "name": "punctuation.separator.proto" }
      },
      "patterns": [
        { "include": "#msgLitConstants" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#list" },
        { "include": "#subMsgOption" }
      ]
    },
    "list": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        { "include": "#constants" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#subMsgOption" },
        {
          "match": "(,)",
          "captures": {
            "1": { "name": "punctuation.separator.proto" }
          }
        }
      ]
    },
    "compactOptions": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        { "include": "#constants" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#subMsgOption" },
        { "include": "#optionName" },
        {
          "match": "(=)|(,)|(.)",
          "captures": {
            "1": { "name": "keyword.operator.assignment.proto" },
            "2": { "name": "punctuation.separator.proto" },
            "3": { "name": "punctuation.separator.proto" }
          }
        }
      ]
    },
    "optionName": {
      "match": "(\\w+)",
      "captures": {
        "1": { "name": "variable.other.proto" }
      }
    },
    "message": {
      "begin": "(message|extend)(\\s+)([A-Za-z_][A-Za-z0-9_.]*)(\\s*)(\\{)?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "3": { "name": "entity.name.class.message.proto" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#reserved" },
        { "include": "#group" },
        { "include": "$self" },
        { "include": "#enum" },
        { "include": "#optionStmt" },
        { "include": "#comments" },
        { "include": "#oneof" },
        { "include": "#field" },
        { "include": "#mapfield" }
      ]
    },
    "reserved": {
      "begin": "(reserved|extensions)\\s+",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" }
      },
      "end": "(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [
        {
          "match": "(\\d+)(\\s+(to)\\s+((\\d+)|(max)))?\\s*(,)?",
          "captures": {
            "1": { "name": "constant.numeric.proto" },
            "3": { "name": "keyword.other.proto" },
            "5": { "name": "constant.numeric.proto" },
            "6": { "name": "keyword.other.proto" },
            "7": { "name": "punctuation.separator.proto" }
          }
        },
        { "include": "#string" },
        { "include": "#compactOptions" }
      ]
    },
    "group": {
      "begin": "\\s*(optional|repeated|required)?\\s*\\b(group)\\s+([A-Za-z_][A-Za-z0-9_.]*)?\\s*(=)?\\s*(0[xX][0-9a-fA-F]+|[0-9]+)?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "keyword.other.proto" },
        "3": { "name": "entity.name.class.message.proto" },
        "4": { "name": "keyword.operator.assignment.proto" },
        "5": { "name": "constant.numeric.proto" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#reserved" },
        { "include": "$self" },
        { "include": "#message" },
        { "include": "#enum" },
        { "include": "#optionStmt" },
        { "include": "#comments" },
        { "include": "#oneof" },
        { "include": "#field" },
        { "include": "#mapfield" },
        { "include": "#compactOptions" }
      ]
    },
    "field": {
      "begin": "\\s*(optional|repeated|required)?\\s*\\b([\\w\\s*.\\s*]+)\\s+(\\w+)\\s*(=)\\s*(0[xX][0-9a-fA-F]+|[0-9]+)",
      "beginCaptures": {
        "1": { "name": "storage.modifier.proto" },
        "2": { "name": "storage.type.proto" },
        "3": { "name": "variable.other.proto" },
        "4": { "name": "keyword.operator.assignment.proto" },
        "5": { "name": "constant.numeric.proto" }
      },
      "end": "(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [{ "include": "#compactOptions" }]
    },
    "mapfield": {
      "begin": "\\s*(map)\\s*(<)\\s*([\\w\\s*.\\s*]+)\\s*(,)\\s*([\\w\\s*.\\s*]+)\\s*(>)\\s+(\\w+)\\s*(=)\\s*(\\d+)",
      "beginCaptures": {
        "1": { "name": "storage.type.proto" },
        "2": { "name": "punctuation.definition.typeparameters.begin.proto" },
        "3": { "name": "storage.type.proto" },
        "4": { "name": "punctuation.separator.proto" },
        "5": { "name": "storage.type.proto" },
        "6": { "name": "punctuation.definition.typeparameters.end.proto" },
        "7": { "name": "variable.other.proto" },
        "8": { "name": "keyword.operator.assignment.proto" },
        "9": { "name": "constant.numeric.proto" }
      },
      "end": "(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [{ "include": "#compactOptions" }]
    },
    "oneof": {
      "begin": "(oneof)\\s+([A-Za-z][A-Za-z0-9_]*)\\s*\\{?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "variable.other.proto" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#optionStmt" },
        { "include": "#comments" },
        { "include": "#group" },
        { "include": "#field" }
      ]
    },
    "enum": {
      "begin": "(enum)(\\s+)([A-Za-z][A-Za-z0-9_]*)(\\s*)(\\{)?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "3": { "name": "entity.name.class.proto" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#reserved" },
        { "include": "#optionStmt" },
        { "include": "#comments" },
        { "include": "#enumValue" }
      ]
    },
    "enumValue": {
      "begin": "([A-Za-z][A-Za-z0-9_]*)\\s*(=)\\s*(0[xX][0-9a-fA-F]+|[0-9]+)",
      "beginCaptures": {
        "1": { "name": "variable.other.proto" },
        "2": { "name": "keyword.operator.assignment.proto" },
        "3": { "name": "constant.numeric.proto" }
      },
      "end": "(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [{ "include": "#compactOptions" }]
    },
    "service": {
      "begin": "(service)\\s+([A-Za-z][A-Za-z0-9_.]*)\\s*\\{?",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "entity.name.class.message.proto" }
      },
      "end": "\\}",
      "patterns": [
        { "include": "#comments" },
        { "include": "#optionStmt" },
        { "include": "#method" }
      ]
    },
    "method": {
      "begin": "(rpc)\\s+([A-Za-z][A-Za-z0-9_]*)",
      "beginCaptures": {
        "1": { "name": "keyword.other.proto" },
        "2": { "name": "entity.name.function" }
      },
      "end": "\\}|(;)",
      "endCaptures": {
        "1": { "name": "punctuation.terminator.proto" }
      },
      "patterns": [
        { "include": "#comments" },
        { "include": "#optionStmt" },
        { "include": "#rpcKeywords" },
        { "include": "#ident" }
      ]
    },
    "rpcKeywords": {
      "match": "\\b(stream|returns)\\b",
      "name": "keyword.other.proto"
    },
    "ident": {
      "match": "[A-Za-z][A-Za-z0-9_]*",
      "name": "entity.name.class.proto"
    },
    "constants": {
      "match": "\\b(true|false|max|nan|inf|[A-Z_]+)\\b",
      "name": "constant.language.proto"
    },
    "msgLitConstants": {
      "match": "\\b(True|true|t|False|false|f|max|nan|inf|[A-Z_]+)\\b",
      "name": "constant.language.proto"
    },
    "storagetypes": {
      "match": "\\b(double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b",
      "name": "storage.type.proto"
    },
    "string": {
      "match": "('([^']|\\')*')|(\"([^\"]|\\\")*\")",
      "name": "string.quoted.double.proto"
    },
    "number": {
      "name": "constant.numeric.proto",
      "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
    }
  }
}
